# Default values for alertmanager-ntfy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/alexbakker/alertmanager-ntfy
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /health
    port: http

nodeSelector: {}

tolerations: []

affinity: {}

# ConfigMap configuration
configMap:
  # -- Name of an existing ConfigMap containing the alertmanager-ntfy configuration.
  # When set, the chart will not create a ConfigMap and will use this instead.
  # The ConfigMap must contain a key named 'config.yml'
  existingConfigMap: ""

# -- Contains config.yml for alertmanager-ntfy
# @default -- See https://github.com/alexbakker/alertmanager-ntfy
config:
  http:
    addr: :8000
    auth:
      # -- Username for Alertmanager to connect to Alertmanager-ntfy
      username: "alertmanager"
      # -- Password for Alertmanager to connect to Alertmanager-ntfy
      password: "verysecure"
  ntfy:
    # -- URL for ntfy service, if not using ntfy.sh
    baseurl: https://ntfy.sh
    auth:
      basic:
        # -- Username for alertmanager-ntfy to connect to ntfy
        username: "admin"
        # -- Password for alertmanager-ntfy to connect to ntfy
        password: "verysecure"
      # OR
      # -- Token for alertmanager-ntfy to connect to ntfy
      token: "verysecureauthtoken"
    notification:
      # -- ntfy topic. Can either be a hardcoded string or a gval expression that evaluates to a string
      topic: alertmanager
      # Priority reference: https://docs.ntfy.sh/publish/#message-priority
      # Can either be a hardcoded string or a gval expression that evaluates to a string
      priority: |
        status == "firing" ? "urgent" : "default"
      tags:
        # Tags with no condition are always included
        # Emoji shortcode reference: https://docs.ntfy.sh/emojis/
        - tag: "+1"
          condition: status == "resolved"
        - tag: rotating_light
          condition: status == "firing"
      templates:
        title: |
          {{ if eq .Status "resolved" }}Resolved: {{ end }}{{ index .Annotations "summary" }}
        description: |
          {{ index .Annotations "description" }}
        headers:
          X-Click: |
            {{ .GeneratorURL }}
